#그리드 함수문제
# <문제>거슬름돈문제:
# 당신은 음식점의 계산을 도와주는 점원입니다. 카운터에는 거스름돈으로 사용할
# 500원, 100원, 50원, 10원짜리 동전이 무한히 존재한다고 가정합니다.
# 손님에게 거슬러 주어야 할 돈이 N원 일때 거슬러 주어야 할 돈전의
# 최소 개수를 구하세요. 단,거슬러줘야 할 돈 N은 항상 10의 배수입니다.

#거스름돈:문제해결 아이디어
#최적의 해를 빠르게 구하기 위해서는 가장큰 화폐단위부터 돈을 거슬러주면 됩니다.
# N원 거슬러 줘야 할때, 가자 먼저 500원으로 거슬러 줄수 있을만큼 거슬러줍니다.
# 이후에 100원,50원,10원 짜리 차례대로 거슬러 줄수 있을만큼 거슬러 주면 됩니다.
# N = 1260원 일때의 예시 확인

# #코딩
# n = 1260
# count = 0
# array = [500, 100, 50, 10]

# for coin in array:
#     count += n // coin
#     n %= coin
# print(count)

# #<문제>1이 될 때까지:문제설명
# 어떠한 수 N이1이 될때까지 다음의 두과정중 하나를 반복적으로 수행하려고 한다.
# 단. 두번째 연산은 N이K로 나누어 떨어질때만 선택할수 있습니다.
# 1.N에서 1을 뺍니다.
# 2.N을K로 나눕니다.
# 예를들어 N이 17,K가 4라고 가정합시다. 이때 1번의 과정을 한 번 수행하면 N은16이 됩니다.
# 이후에 2번의 과정을 두 번 수행하면 N은1이 됩니다. 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 됩니다.
# 이는 Nㅇ르 1로 만드는 최소 횟수입니다.
# N과K가 주어질때 N이1이 될 까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하시오.

# n,k = map(int,input().split()) #n,k을 공백을 기준으로 구분하여 입력받기
# result = 0
# while True:
#     target = (n // k) * k #n이 k로 나누어 떨어지는 수가 될 때까지 빼기
#     result += (n - target)
#     n = target
#     if n < k:                   # n 이 k 보다 작을때 (더이상 나눌수 없을때)반복문 탈출
#         break
#     result += 1            #k로 나누기
#     n //= k
# result += (n - 1)         #마지막으로 남은 수에 대하여 1씩빼기
# print(result)


#<문제>곱하기 혹은 더하기 :문제설명
# 각 자리가 숫자 (0부터9)로만 이루어진 문자열 S가 주어졌을때, 왼쪽부터 오른쪽으로 하나씩 모든 숫자를 
# 확인하며 숫자 사이에 'x'혹은 '+'연산자르르 넣어 결과적으로 만들어질 수있는 가장큰 수를 구하는 프로그램을 작성하세요
# 단.+보다x를 먼저 계산하는 일반적인 방식과는 달리,모든 연산은 왼쪽에서부터 순서대로 이루어진다고 가정합니다.
# 예를 들어 02984라는 문자열로 만들수 있는 가장 큰 수는 ((((0+2)x9)x8)x4) = 576입니다. 또한 만들어질수 있는
# 가장 큰 수는 항상 20억 이하의 정수가 되도록 입력이 주어집니다.


# s = input()
# result = int(s[0]) #첫번째 문자를 숫자로 변경하여 대입
# for i in range(1,len(s)):
#     num = int(s[i]) #두 수 중에서 하나라도 0혹은 1인경우, 곱하기보다는 더하기 수행
#     if num <= 1 or result <=1 :
#         result += num
#     else:
#         result *= num
# print(result)


#<문제>모험가 길드:
# 한 마을에 모함가가n명 있습니다. 모험가 길드에서는 n명의 모험가를 대상으로 공포도를 측정했는데
# 공포도가 높은 모험가는 쉽게 공포를 느껴 위험상황에서 제대로 대처할 능력이 떨어집니다.
# 모함가 길드장인 성훈이는 모함가 그룹을 안전하게 구성하고자 공포도가x인 모험가는 반드시 x명 이상으로 구성한 모험가 그룹에 참여해야 여행을
# 떠날수 있도록 규정했습니다. 
# 성훈이는 최대 몇개의 모험가 그룹을 만들수 있는지 궁금합니다. n명의 모험가에 대한 정보가 주어졌을때
# 여행을 떠날수 있는 그룹수의 최댓값을 구하는 프로그램을 작성하세요.

# n = int(input())
# data = list(map(int,input().split()))
# data.sort()

# result = 0 #총 그룹의 수
# count = 0 #현재 그룹에 포함된 모함가의 수

# for i in data: #공포도를 낮은 것부터 하나씩 확인하며
#     count += 1 #현재 그룹에 해당 모험가를 포함시키기
#     if count >= i: #현재 그룹에 포함된 모함가의 수가 현재의 공포도 이상이라면,그룹결성
#         result += 1 #총 그룹의 수 증가시키기 
#         count = 0 #현재 그룹에 포함된 모함가의 수 초기화

# print(result)  #총 그룹의 수 출력

#구현
# for i in range(5):
#     for j in range(5):
#         print('(', i , ',', j, ')', end=' ')
#     print()

# # 동, 북, 서, 남
# dx = [0, -1, 0, 1]
# dy = [1, 0, -1, 0]
# # 현재 위치
# x, y = 2, 2

# for i in range(4):
#     #다음 위치
#     nx = x + dx[i]
#     ny = y + dy[i]
#     print(nx, ny)

# <문제>상하좌우: 문제설명
# 여행가 A는 N x N 크기의 정사각형 공간 위에 서 있습니다. 이 공간은 1 x 1 크기의 정사각형으로 나누어져 있습니다.
# 가장 왼쪽 위 좌표는 (1,1)이며, 가장 오른쪽 아래 좌표는(N,N)에 해당합니다. 여행가A는 상,하,좌,우 방향으로 이동할수 있으며,
# 시작 좌표는 항상(1,1)입니다. 우리 앞에는 여행가 A가 이동할 계획이 적힌 계획서가 놓여 있습니다.
# 계획서에는 하나의 줄에 띄어쓰기를 기준으로 하여 L,R,U,D중 하나의 문자가 반복적으로 적혀 있습니다.
# 각 문자의 의미는 다음과 같습니다.
# L:왼쪽으로 한 칸 이동
# R:오른쪽으로 한 칸 이동
# U:위로 한 칸 이동
# D:아래로 한 칸 이동
# 이때 여행가 A가 N x N 크기의 정사각형 공간을 벗어나는 움직임은 무시됩니다. 예를들어 (1,1)의 위치 에서 
# L 혹은 U 를 만나면 무시됩니다. 다음은 N= 5 인 지도와 계획서입니다.

# <풀이> #N 입력 받기
# n = int(input())
# x, y = 1, 1
# plans = input().split()

# # L, R, U, D에 따른 이동 방향
# dx = [0, 0, -1, 1]
# dy = [-1, 1, 0, 0]
# move_types = ['L', 'R', 'U', 'D']

# # 이동 계획을 하나씩 확인하기
# for plan in plans:
# # 이동 후 좌표 구하기
#     for i in range(len(move_types)):
#         if plan == move_types[i]:
#             nx = x + dx[i]
#             ny = y + dy[i]
#        # 공간을 벗어나는 경우 무시
#     if nx < 1 or ny < 1 or nx > n or ny > n:
#         continue
#            #이동수행
#     x, y = nx, ny

# print(x, y)

# <문제>시각 : 문제설명
# 정수 N이 입력되면 00시 00분 00초부터 N시59분 59초까지의 모든 시각 중에서 3이 하나라도 포함되는
# 모든 경우의 수를 구하는 프로그램을 작성하세요. 예를 들어 1을 입력했을 때 다음은 3이 하나라도 포함되어
# 있으므로 세어야 하는 시각입니다.
# 00시 00분 03초
# 00시 13분 30초
# 반면에 다음은 3이 하나도 포함되어 있지 않으므로 세면 안 되는 시각입니다.
# 00시 02분 55초
# 01시 27분 45초

# <풀이>
 # H 입력 받기
# h = int(input())

# count = 0 
# for i in range(h +1):
#     for j in range(60):
#         for k in range(60):
#             # 매 시각 안에 '3'이 포함되어 있다면 카운트 증가
#             if '3' in str(i) + str(j) + str(k):
#                 count += 1
# print(count)


# <문제>왕실의 나이트 : 문제설명
# 행복 왕국의 왕실 정원은 체스판 과 같은 8 x 8 좌표 평면입니다. 왕실 정원의 특정한 한 칸에 나이트가
# 서있습니다. 나이트는 매우 충성스러운 신하로서 매일 무술을 연마합니다.
# 나이트는 말을 타고 있기 때문에 이동을 할 때는 L자 형태로만 이동할 수 있으며 정원 밖으로는 나갈 수 없습니다.
# 나이트는 특정 위치에서 다음과 같은 2가지 경우로 이동할수 있습니다.
# 1. 수평으로 두 칸 이동한 뒤에 수직으로 한 칸 이동하기
# 2. 수직으로 두 칸 이동한 뒤에 수평으로 한 칸 이동하기

# <문제풀이>
# 현재 나이트의 위치 입력받기
# input_data = input()
# row = int(input_data[1])
# column = int(ord(input_data[0])) - int(ord('a')) + 1

# # 나이트가 이동할 수 있는 8가지 방향 정의
# steps = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)]

# # 8가지 방향에 대하여 각 위치로 이동이 가능한지 확인
# result = 0
# for step in steps:
#     # 이동하고자 하는 위치확인
#     next_row = row + step[0]
#     next_column = column + step[1]
#     # 해당 위치로 이동이 가능하다면 카운트 증가
#     if next_row >= 1 and next_row <=8 and next_column >=1 and next_column <= 8:
#         result += 1

# print(result)

# <문제>문자열 재정렬 : 문제 설명
# 알파벳 대문자와 숫자(0~9)로만 구성된 문자열이 입력으로 주어집니다. 이때 모든 
# 알파벳을 오름차순으로 정렬하여 이어서 출력한 뒤에, 그뒤에 모든 숫자를 더한 값을
# 이어서 출력합니다. 에를 들어 K1KA5CB7이라는 값이 들어오면 ABCKK13을 출력합니다.

# <풀이>
# data = input()
# result = []
# value = 0
# # 문자를 하나씩 확인하며
# for x in data:
#     #알파벳인 경우 결과 리스트에 삽입
#     if x.isalpha():
#         result.append(x)
#     #숫자는 따로 더하기
#     else:
#         value += int(x)

# # 알파벳을 오름차순으로 정렬
# result.sort()

# # 숫자가 하나라도 존재하는 경우 가장 뒤에 삽입
# if value != 0:
#     result.append(str(value))
# # 최종 결과 출력(리스트를 문자열로 변환하여 출력)
# print(''.join(result))






